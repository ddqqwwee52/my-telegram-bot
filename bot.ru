import os
import logging
import sqlite3
from datetime import datetime, date
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ë–µ—Ä–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏—Ö –Ω–∞—Å—Ç—Ä–æ–∏–º –ø–æ–∑–∂–µ)
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# –õ–∏–º–∏—Ç—ã
FREE_DAILY_TEXT_LIMIT = 15
FREE_DAILY_IMAGE_LIMIT = 5

client = OpenAI(api_key=OPENAI_API_KEY)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            daily_text_used INTEGER DEFAULT 0,
            daily_image_used INTEGER DEFAULT 0,
            last_reset_date TEXT,
            subscription_type TEXT DEFAULT 'free',
            subscription_end TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def get_user(user_id, username=None):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    today = date.today().isoformat()
    
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username, last_reset_date) 
        VALUES (?, ?, ?)
    ''', (user_id, username, today))
    
    cursor.execute('''
        UPDATE users SET username = ? 
        WHERE user_id = ? AND username != ?
    ''', (username, user_id, username))
    
    cursor.execute('''
        UPDATE users 
        SET daily_text_used = 0, daily_image_used = 0, last_reset_date = ?
        WHERE user_id = ? AND last_reset_date != ?
    ''', (today, user_id, today))
    
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.commit()
    conn.close()
    return user

def update_user_usage(user_id, usage_type):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    if usage_type == 'text':
        cursor.execute('UPDATE users SET daily_text_used = daily_text_used + 1 WHERE user_id = ?', (user_id,))
    elif usage_type == 'image':
        cursor.execute('UPDATE users SET daily_image_used = daily_image_used + 1 WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

def check_limits(user):
    user_id, username, text_used, image_used, last_reset, sub_type, sub_end, created = user
    is_premium = False
    if sub_end and datetime.strptime(sub_end, '%Y-%m-%d').date() >= date.today():
        is_premium = True
    
    text_limit = 9999 if is_premium else FREE_DAILY_TEXT_LIMIT
    image_limit = 9999 if is_premium else FREE_DAILY_IMAGE_LIMIT
    
    return {
        'text_remaining': max(0, text_limit - text_used),
        'image_remaining': max(0, image_limit - image_used),
        'is_premium': is_premium
    }

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
def get_subscription_keyboard():
    keyboard = [
        [InlineKeyboardButton("üí∞ –ù–µ–¥–µ–ª—è - 299 —Ä—É–±.", callback_data="sub_week")],
        [InlineKeyboardButton("üíé –ú–µ—Å—è—Ü - 899 —Ä—É–±.", callback_data="sub_month")],
        [InlineKeyboardButton("üöÄ 3 –º–µ—Å—è—Ü–∞ - 1999 —Ä—É–±.", callback_data="sub_3months")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = get_user(user.id, user.username)
    limits = check_limits(user_data)
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

ü§ñ –Ø ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å ChatGPT –∏ DALL-E!

üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {limits['text_remaining']}/15
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {limits['image_remaining']}/5

{'‚≠ê –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ü–†–ï–ú–ò–£–ú –ø–æ–¥–ø–∏—Å–∫–∞! ‚≠ê' if limits['is_premium'] else ''}

–ö–æ–º–∞–Ω–¥—ã:
/chat [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
/image [–æ–ø–∏—Å–∞–Ω–∏–µ] - –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ  
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/subscribe - –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞
"""
    await update.message.reply_text(welcome_text)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = get_user(user.id, user.username)
    limits = check_limits(user_data)
    
    stats_text = f"""
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:
{limits['text_remaining']} –∏–∑ 15 –æ—Å—Ç–∞–ª–æ—Å—å

–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
{limits['image_remaining']} –∏–∑ 5 –æ—Å—Ç–∞–ª–æ—Å—å

–°—Ç–∞—Ç—É—Å: {'‚≠ê –ü–†–ï–ú–ò–£–ú' if limits['is_premium'] else 'üé´ –ë–ï–°–ü–õ–ê–¢–ù–´–ô'}
"""
    await update.message.reply_text(stats_text)

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    subscribe_text = """
üöÄ –ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–ö–ê

–ü–æ–ª—É—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚Ä¢ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:
"""
    await update.message.reply_text(subscribe_text, reply_markup=get_subscription_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_message = update.message.text
    
    user_data = get_user(user.id, user.username)
    limits = check_limits(user_data)
    
    if limits['text_remaining'] <= 0:
        await update.message.reply_text(
            "‚ùå –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ñ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ /subscribe",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    try:
        update_user_usage(user.id, 'text')
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": user_message}],
            max_tokens=500
        )
        
        bot_reply = response.choices[0].message.content
        await update.message.reply_text(bot_reply)
        
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: /image –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º")
        return
    
    prompt = " ".join(context.args)
    user_data = get_user(user.id, user.username)
    limits = check_limits(user_data)
    
    if limits['image_remaining'] <= 0:
        await update.message.reply_text(
            "‚ùå –õ–∏–º–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. /subscribe",
            reply_markup=get_subscription_keyboard()
        )
        return
    
    try:
        update_user_usage(user.id, 'image')
        await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é...")
        
        response = client.images.generate(
            model="dall-e-2",
            prompt=prompt,
            size="512x512",
            n=1,
        )
        
        image_url = response.data[0].url
        await update.message.reply_photo(photo=image_url)
        
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
async def handle_subscription_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'close':
        await query.message.delete()
        return
    
    payment_text = """
‚úÖ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:

1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É:
   **2200-1234-5678-9012**

2. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã:
   @YourSupportBot

3. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!

–í–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏—Ç–µ: @YourSupportBot
"""
    await query.edit_message_text(payment_text)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("image", handle_image))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_subscription_button))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
